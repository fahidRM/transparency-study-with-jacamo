/* JaCaMoProjectParser.java */
/* Generated By:JavaCC: Do not edit this line. JaCaMoProjectParser.java */
package jacamo.project.parser;

import java.util.*;
import java.io.*;
import jacamo.project.*;
import jason.mas2j.*;
import jason.asSyntax.*;
//import jason.asSemantics.*;
//import jason.jeditplugin.*;
//import jason.asSyntax.ArithExpr.ArithmeticOp;
//import jason.asSyntax.LogExpr.LogicalOp;
//import jason.asSyntax.RelExpr.RelationalOp;

public class JaCaMoProjectParser implements JaCaMoProjectParserConstants {


    JaCaMoProject project = null;

    // Methods from Jason ASL parser

    private String getSourceRef(SourceInfo s) {
        if (s == null)
            return "[]";
        else
            return "["+s.getSrcFile()+":"+s.getBeginSrcLine()+"]";
    }
    private String getSourceRef(DefaultTerm t) {
        return getSourceRef( t.getSrcInfo());
    }
    private String getSourceRef(Object t) {
        if (t instanceof DefaultTerm)
            return getSourceRef((DefaultTerm)t);
        else if (t instanceof SourceInfo)
            return getSourceRef((SourceInfo)t);
        else
            return "[]";
    }
    private Term changeToAtom(Object o) {
        Term u = (Term)o;
        if (u == Literal.LTrue)
            return u;
        if (u == Literal.LFalse)
            return u;
        if (u.isAtom())
           return new Atom((Literal)u);
        return u;
    }

/* Configuration Grammar */
  final public 
JaCaMoProject parse(String directory) throws ParseException {Token masId; String f = null; ClassParameters cp; String h; Token id; boolean r;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(EOL);
    }
    jj_consume_token(MAS);
    masId = jj_consume_token(ATOM);
project = new JaCaMoProject();
                                 project.setSocName(masId.image);
                                 project.setDirectory(directory);
                                 project.initAgMap();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case USES:{
      jj_consume_token(USES);
      f = fileName();
project.importProject(directory,f);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 63:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(63);
        f = fileName();
project.importProject(directory,f);
      }
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(EOL);
    }
    jj_consume_token(64);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(EOL);
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AGENT:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      agent();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WORKSPACE:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      workspace();
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INST:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      institution();
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORG:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_8;
      }
      organisation();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NODE:
      case CLASSPATH:
      case ASLPATH:
      case JAVAPATH:
      case ORGPATH:
      case PLATFORM:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASSPATH:{
        jj_consume_token(CLASSPATH);
        jj_consume_token(65);
project.getClassPaths().clear();
        label_10:
        while (true) {
          f = fileName();
          label_11:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              jj_consume_token(EOL);
              break;
              }
            case 63:{
              jj_consume_token(63);
              break;
              }
            default:
              jj_la1[10] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:
            case 63:{
              ;
              break;
              }
            default:
              jj_la1[11] = jj_gen;
              break label_11;
            }
          }
project.addClassPath(f);
          if (jj_2_1(4)) {
            ;
          } else {
            break label_10;
          }
        }
        break;
        }
      case ASLPATH:{
        jj_consume_token(ASLPATH);
        jj_consume_token(65);
project.getSourcePaths().clearPaths();
        label_12:
        while (true) {
          f = fileName();
          label_13:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              jj_consume_token(EOL);
              break;
              }
            case 63:{
              jj_consume_token(63);
              break;
              }
            default:
              jj_la1[12] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:
            case 63:{
              ;
              break;
              }
            default:
              jj_la1[13] = jj_gen;
              break label_13;
            }
          }
project.addSourcePath(f);
          if (jj_2_2(4)) {
            ;
          } else {
            break label_12;
          }
        }
        break;
        }
      case ORGPATH:{
        jj_consume_token(ORGPATH);
        jj_consume_token(65);
project.getOrgPaths().clearPaths();
        label_14:
        while (true) {
          f = fileName();
          label_15:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              jj_consume_token(EOL);
              break;
              }
            case 63:{
              jj_consume_token(63);
              break;
              }
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:
            case 63:{
              ;
              break;
              }
            default:
              jj_la1[15] = jj_gen;
              break label_15;
            }
          }
project.addOrgSourcePath(f);
          if (jj_2_3(4)) {
            ;
          } else {
            break label_14;
          }
        }
        break;
        }
      case JAVAPATH:{
        jj_consume_token(JAVAPATH);
        jj_consume_token(65);
project.getJavaPaths().clearPaths();
        label_16:
        while (true) {
          f = fileName();
          label_17:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              jj_consume_token(EOL);
              break;
              }
            case 63:{
              jj_consume_token(63);
              break;
              }
            default:
              jj_la1[16] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:
            case 63:{
              ;
              break;
              }
            default:
              jj_la1[17] = jj_gen;
              break label_17;
            }
          }
project.addJavaSourcePath(f);
          if (jj_2_4(4)) {
            ;
          } else {
            break label_16;
          }
        }
        break;
        }
      case PLATFORM:{
        jj_consume_token(PLATFORM);
        jj_consume_token(65);
project.resetPlatform();
        label_18:
        while (true) {
          cp = classDef();
          label_19:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              jj_consume_token(EOL);
              break;
              }
            case 63:{
              jj_consume_token(63);
              break;
              }
            default:
              jj_la1[18] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:
            case 63:{
              ;
              break;
              }
            default:
              jj_la1[19] = jj_gen;
              break label_19;
            }
          }
project.addPlatformParameters(cp);
          if (jj_2_5(4)) {
            ;
          } else {
            break label_18;
          }
        }
        break;
        }
      case NODE:{
        jj_consume_token(NODE);
        id = jj_consume_token(ATOM);
r = false;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RUNNING:{
          jj_consume_token(RUNNING);
r = true;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          ;
        }
h = null;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 66:{
          jj_consume_token(66);
          h = host();
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EOL:{
            jj_consume_token(EOL);
            break;
            }
          case 63:{
            jj_consume_token(63);
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EOL:
          case 63:{
            ;
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            break label_20;
          }
        }
project.addNodeHost(id.image,h,r);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(67);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_21;
      }
      jj_consume_token(EOL);
    }
    jj_consume_token(0);
project.parserFinished(); {if ("" != null) return project;}
    throw new Error("Missing return statement in function");
  }

  final public void agent() throws ParseException {Token agType; Token agName; Token qty; Token opt; Token t; Object oval; String ns = null;
                              JaCaMoAgentParameters ag = new JaCaMoAgentParameters(project);
                              ClassParameters arch;
                              Literal l;
                              List<String> instances = new ArrayList<String>();
                              String h = null; String n = null;
                              String agFile = null;
    jj_consume_token(AGENT);
    agName = jj_consume_token(ATOM);
ag.name = agName.image;
                              agFile = agName.image+".asl";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 65:{
      jj_consume_token(65);
      agFile = fileName();
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
try {
                                ag.setSource(agFile.toString());
                              } catch (Exception e) {
                                e.printStackTrace();
                              }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 64:{
      jj_consume_token(64);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EOL:{
          ;
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          break label_22;
        }
        jj_consume_token(EOL);
      }
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INSTANCES:
        case AGARCH:
        case AGCLASS:
        case AGBBCLASS:
        case BELIEF:
        case GOAL:
        case FOCUS:
        case JOIN:
        case ROLES:
        case DEBUG:
        case ATOM:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_23;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INSTANCES:{
          jj_consume_token(INSTANCES);
          jj_consume_token(65);
          if (jj_2_7(4)) {
            oval = jj_consume_token(INT);
            label_24:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:{
                jj_consume_token(EOL);
                break;
                }
              case 63:{
                jj_consume_token(63);
                break;
                }
              default:
                jj_la1[29] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:
              case 63:{
                ;
                break;
                }
              default:
                jj_la1[30] = jj_gen;
                break label_24;
              }
            }
ag.setNbInstances( new Integer(oval.toString()));
          } else {
            label_25:
            while (true) {
              if (jj_2_6(4)) {
                ;
              } else {
                break label_25;
              }
              opt = jj_consume_token(ATOM);
              label_26:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case EOL:{
                  jj_consume_token(EOL);
                  break;
                  }
                case 63:{
                  jj_consume_token(63);
                  break;
                  }
                default:
                  jj_la1[31] = jj_gen;
                  jj_consume_token(-1);
                  throw new ParseException();
                }
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case EOL:
                case 63:{
                  ;
                  break;
                  }
                default:
                  jj_la1[32] = jj_gen;
                  break label_26;
                }
              }
instances.add(opt.image);
            }
          }
          break;
          }
        case AGARCH:{
          jj_consume_token(AGARCH);
          jj_consume_token(65);
          label_27:
          while (true) {
            arch = classDef();
            label_28:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:{
                jj_consume_token(EOL);
                break;
                }
              case 63:{
                jj_consume_token(63);
                break;
                }
              default:
                jj_la1[33] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:
              case 63:{
                ;
                break;
                }
              default:
                jj_la1[34] = jj_gen;
                break label_28;
              }
            }
ag.insertArchClass(arch);
            if (jj_2_8(4)) {
              ;
            } else {
              break label_27;
            }
          }
          break;
          }
        case AGCLASS:{
          jj_consume_token(AGCLASS);
          jj_consume_token(65);
          ag.agClass = classDef();
          label_29:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              ;
              break;
              }
            default:
              jj_la1[35] = jj_gen;
              break label_29;
            }
          }
          break;
          }
        case AGBBCLASS:{
          jj_consume_token(AGBBCLASS);
          jj_consume_token(65);
          ag.bbClass = classDef();
          label_30:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              ;
              break;
              }
            default:
              jj_la1[36] = jj_gen;
              break label_30;
            }
          }
          break;
          }
        case BELIEF:{
          jj_consume_token(BELIEF);
          jj_consume_token(65);
          label_31:
          while (true) {
            l = literal();
            label_32:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:{
                jj_consume_token(EOL);
                break;
                }
              case 63:{
                jj_consume_token(63);
                break;
                }
              default:
                jj_la1[37] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:
              case 63:{
                ;
                break;
                }
              default:
                jj_la1[38] = jj_gen;
                break label_32;
              }
            }
ag.addInitBel(l);
            if (jj_2_9(4)) {
              ;
            } else {
              break label_31;
            }
          }
          break;
          }
        case GOAL:{
          jj_consume_token(GOAL);
          jj_consume_token(65);
          label_33:
          while (true) {
            l = literal();
            label_34:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:{
                jj_consume_token(EOL);
                break;
                }
              case 63:{
                jj_consume_token(63);
                break;
                }
              default:
                jj_la1[39] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:
              case 63:{
                ;
                break;
                }
              default:
                jj_la1[40] = jj_gen;
                break label_34;
              }
            }
ag.addInitGoal(l);
            if (jj_2_10(4)) {
              ;
            } else {
              break label_33;
            }
          }
          break;
          }
        case FOCUS:{
          jj_consume_token(FOCUS);
          jj_consume_token(65);
          label_35:
          while (true) {
n = null; ns = null;
            oval = jj_consume_token(ATOM);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 68:{
              jj_consume_token(68);
              t = jj_consume_token(ATOM);
ns = oval.toString(); oval=t;
              break;
              }
            default:
              jj_la1[41] = jj_gen;
              ;
            }
            label_36:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:{
                jj_consume_token(EOL);
                break;
                }
              case 63:{
                jj_consume_token(63);
                break;
                }
              default:
                jj_la1[42] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:
              case 63:{
                ;
                break;
                }
              default:
                jj_la1[43] = jj_gen;
                break label_36;
              }
            }
ag.addFocus(oval.toString(), ns);
            if (jj_2_11(4)) {
              ;
            } else {
              break label_35;
            }
          }
          break;
          }
        case JOIN:{
          jj_consume_token(JOIN);
          jj_consume_token(65);
          label_37:
          while (true) {
            oval = jj_consume_token(ATOM);
n = null;
            label_38:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:{
                jj_consume_token(EOL);
                break;
                }
              case 63:{
                jj_consume_token(63);
                break;
                }
              default:
                jj_la1[44] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:
              case 63:{
                ;
                break;
                }
              default:
                jj_la1[45] = jj_gen;
                break label_38;
              }
            }
ag.addWorkspace(oval.toString());
            if (jj_2_12(4)) {
              ;
            } else {
              break label_37;
            }
          }
          break;
          }
        case ROLES:{
          jj_consume_token(ROLES);
          jj_consume_token(65);
          label_39:
          while (true) {
            if (jj_2_13(4)) {
              ;
            } else {
              break label_39;
            }
            opt = jj_consume_token(ATOM);
            jj_consume_token(IN);
            oval = jj_consume_token(ATOM);
n = null;
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 66:{
              jj_consume_token(66);
              t = jj_consume_token(ATOM);
n = t.image;
              break;
              }
            default:
              jj_la1[46] = jj_gen;
              ;
            }
            label_40:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:{
                jj_consume_token(EOL);
                break;
                }
              case 63:{
                jj_consume_token(63);
                break;
                }
              default:
                jj_la1[47] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:
              case 63:{
                ;
                break;
                }
              default:
                jj_la1[48] = jj_gen;
                break label_40;
              }
            }
if (n != null) ag.addFocus(oval.toString(), null, n);
                                                                                   ag.addRole(oval.toString(), opt.toString());
          }
          break;
          }
        case DEBUG:{
          jj_consume_token(DEBUG);
          jj_consume_token(65);
          oval = literal();
          label_41:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              jj_consume_token(EOL);
              break;
              }
            case 63:{
              jj_consume_token(63);
              break;
              }
            default:
              jj_la1[49] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:
            case 63:{
              ;
              break;
              }
            default:
              jj_la1[50] = jj_gen;
              break label_41;
            }
          }
ag.addOption("debug", oval.toString());
          break;
          }
        case ATOM:{
          opt = jj_consume_token(ATOM);
          jj_consume_token(65);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case STRING:{
            oval = jj_consume_token(STRING);
            break;
            }
          case REAL:{
            oval = jj_consume_token(REAL);
            break;
            }
          case INT:{
            oval = jj_consume_token(INT);
            break;
            }
          case VAR:
          case TK_TRUE:
          case TK_FALSE:
          case TK_NEG:
          case TK_BEGIN:
          case TK_END:
          case ATOM:
          case UNNAMEDVAR:{
            oval = literal();
            break;
            }
          default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_42:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              ;
              break;
              }
            default:
              jj_la1[52] = jj_gen;
              break label_42;
            }
          }
ag.addOption(opt.image,oval.toString());
          break;
          }
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(67);
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        break label_43;
      }
      jj_consume_token(EOL);
    }
if (instances.isEmpty()) {
                                project.addAgent(ag);
                             } else {
                                for (String i: instances) {
                                    AgentParameters na = ag.copy();
                                    na.name = i;
                                    project.addAgent(na);
                                }
                             }
  }

  final public void workspace() throws ParseException {Token t;
                              JaCaMoWorkspaceParameters wks = new JaCaMoWorkspaceParameters(project);
    jj_consume_token(WORKSPACE);
    t = jj_consume_token(ATOM);
wks.setName(t.image);
    jj_consume_token(64);
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        break label_44;
      }
      jj_consume_token(EOL);
    }
    label_45:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HOST:
      case DEBUG:
      case ARTIFACT:
      case AGENTS:{
        ;
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        break label_45;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ARTIFACT:{
        artifact(wks);
        break;
        }
      case AGENTS:{
        jj_consume_token(AGENTS);
        jj_consume_token(65);
        label_46:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ATOM:{
            t = jj_consume_token(ATOM);
            break;
            }
          case AST:{
            t = jj_consume_token(AST);
            break;
            }
          default:
            jj_la1[58] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_47:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              jj_consume_token(EOL);
              break;
              }
            case 63:{
              jj_consume_token(63);
              break;
              }
            default:
              jj_la1[59] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:
            case 63:{
              ;
              break;
              }
            default:
              jj_la1[60] = jj_gen;
              break label_47;
            }
          }
project.addAgWorkspace(t.image,wks);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AST:
          case ATOM:{
            ;
            break;
            }
          default:
            jj_la1[61] = jj_gen;
            break label_46;
          }
        }
        break;
        }
      case HOST:{
        jj_consume_token(HOST);
        jj_consume_token(65);
        t = jj_consume_token(ATOM);
        label_48:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EOL:{
            ;
            break;
            }
          default:
            jj_la1[62] = jj_gen;
            break label_48;
          }
        }
wks.setHost(t.image);
        break;
        }
      case DEBUG:{
        jj_consume_token(DEBUG);
        label_49:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EOL:{
            ;
            break;
            }
          default:
            jj_la1[63] = jj_gen;
            break label_49;
          }
        }
wks.setDebug(true);
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(67);
    label_50:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[65] = jj_gen;
        break label_50;
      }
      jj_consume_token(EOL);
    }
project.addWorkspace(wks);
  }

  final public void artifact(JaCaMoWorkspaceParameters wks) throws ParseException {Token t; Token tns; Token a; String ns = null;
                              ClassParameters cp;
    jj_consume_token(ARTIFACT);
    t = jj_consume_token(ATOM);
    jj_consume_token(65);
    cp = classDef();
wks.addArtifact(t.image,cp);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 64:{
      jj_consume_token(64);
      label_51:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EOL:{
          ;
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          break label_51;
        }
        jj_consume_token(EOL);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOCUSED:{
        jj_consume_token(FOCUSED);
        jj_consume_token(65);
        label_52:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case AST:
          case ATOM:{
            ;
            break;
            }
          default:
            jj_la1[67] = jj_gen;
            break label_52;
          }
          if (jj_2_14(10)) {
            tns = jj_consume_token(ATOM);
            jj_consume_token(68);
ns = tns.image;
          } else {
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ATOM:{
            a = jj_consume_token(ATOM);
            break;
            }
          case AST:{
            a = jj_consume_token(AST);
            break;
            }
          default:
            jj_la1[68] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_53:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              jj_consume_token(EOL);
              break;
              }
            case 63:{
              jj_consume_token(63);
              break;
              }
            default:
              jj_la1[69] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:
            case 63:{
              ;
              break;
              }
            default:
              jj_la1[70] = jj_gen;
              break label_53;
            }
          }
project.addAgFocus(a.image,ns,t.image,wks); ns = null;
        }
        break;
        }
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      jj_consume_token(67);
      break;
      }
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    label_54:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        break label_54;
      }
      jj_consume_token(EOL);
    }
project.addWorkspace(wks);
  }

  final public void organisation() throws ParseException {Token t;  Token opt; Object oval;
                              JaCaMoGroupParameters g;
                              JaCaMoOrgParameters org = new JaCaMoOrgParameters(project);
    jj_consume_token(ORG);
    t = jj_consume_token(ATOM);
org.setName(t.image);
                             if (project.getOrg(org.getName()) != null) {
                                {if (true) throw new ParseException("Organisation with id "+org.getName()+" already exists in the project!");}
                             }
                             org.addParameter("source",t.image+".xml");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 65:{
      jj_consume_token(65);
      oval = fileName();
org.addParameter("source",oval.toString());
      break;
      }
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    jj_consume_token(64);
    label_55:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        break label_55;
      }
      jj_consume_token(EOL);
    }
    label_56:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AGENTS:
      case GROUP:
      case SCHEME:
      case SITUATED:
      case ATOM:{
        ;
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        break label_56;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GROUP:{
        g = group(org);
org.addGroup(g);
        break;
        }
      case SCHEME:{
        scheme(org);
        break;
        }
      case AGENTS:{
        jj_consume_token(AGENTS);
        jj_consume_token(65);
        label_57:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ATOM:{
            t = jj_consume_token(ATOM);
            break;
            }
          case AST:{
            t = jj_consume_token(AST);
            break;
            }
          default:
            jj_la1[77] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_58:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              jj_consume_token(EOL);
              break;
              }
            case 63:{
              jj_consume_token(63);
              break;
              }
            default:
              jj_la1[78] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:
            case 63:{
              ;
              break;
              }
            default:
              jj_la1[79] = jj_gen;
              break label_58;
            }
          }
project.addAgWorkspace(t.image,org);
          if (jj_2_15(4)) {
            ;
          } else {
            break label_57;
          }
        }
        break;
        }
      case SITUATED:{
        jj_consume_token(SITUATED);
        jj_consume_token(65);
        opt = jj_consume_token(ATOM);
        label_59:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EOL:{
            ;
            break;
            }
          default:
            jj_la1[80] = jj_gen;
            break label_59;
          }
        }
org.setInstitution(opt.image);
        break;
        }
      case ATOM:{
        opt = jj_consume_token(ATOM);
        jj_consume_token(65);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          oval = jj_consume_token(STRING);
          break;
          }
        case REAL:{
          oval = jj_consume_token(REAL);
          break;
          }
        case INT:{
          oval = jj_consume_token(INT);
          break;
          }
        case VAR:
        case TK_TRUE:
        case TK_FALSE:
        case TK_NEG:
        case TK_BEGIN:
        case TK_END:
        case ATOM:
        case UNNAMEDVAR:{
          oval = literal();
          break;
          }
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_60:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EOL:{
            ;
            break;
            }
          default:
            jj_la1[82] = jj_gen;
            break label_60;
          }
        }
org.addParameter(opt.image,oval.toString());
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(67);
    label_61:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        break label_61;
      }
      jj_consume_token(EOL);
    }
project.addOrg(org);
  }

  final public JaCaMoGroupParameters group(JaCaMoOrgParameters org) throws ParseException {Token t; Token r; Token type; Token opt; Object oval = null;
                             JaCaMoGroupParameters sg;
                             JaCaMoGroupParameters g = new JaCaMoGroupParameters(project);
    jj_consume_token(GROUP);
    t = jj_consume_token(ATOM);
    jj_consume_token(65);
    type = jj_consume_token(ATOM);
g.setName(t.image); g.setType(type.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 64:{
      jj_consume_token(64);
      label_62:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EOL:{
          ;
          break;
          }
        default:
          jj_la1[85] = jj_gen;
          break label_62;
        }
        jj_consume_token(EOL);
      }
      label_63:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEBUG:
        case GROUP:
        case RESPFOR:
        case PLAYERS:
        case ATOM:{
          ;
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          break label_63;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case GROUP:{
          sg = group(org);
g.addSubGroup(sg);
          break;
          }
        case RESPFOR:{
          jj_consume_token(RESPFOR);
          jj_consume_token(65);
          label_64:
          while (true) {
            t = jj_consume_token(ATOM);
            label_65:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:{
                jj_consume_token(EOL);
                break;
                }
              case 63:{
                jj_consume_token(63);
                break;
                }
              default:
                jj_la1[87] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:
              case 63:{
                ;
                break;
                }
              default:
                jj_la1[88] = jj_gen;
                break label_65;
              }
            }
g.addResponsibleFor(t.image);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case ATOM:{
              ;
              break;
              }
            default:
              jj_la1[89] = jj_gen;
              break label_64;
            }
          }
          break;
          }
        case DEBUG:{
          jj_consume_token(DEBUG);
oval = "inspector_gui(on)";
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 65:{
            jj_consume_token(65);
            oval = literal();
            break;
            }
          default:
            jj_la1[90] = jj_gen;
            ;
          }
          label_66:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              ;
              break;
              }
            default:
              jj_la1[91] = jj_gen;
              break label_66;
            }
          }
g.setDebug(oval.toString());
          break;
          }
        case ATOM:{
          opt = jj_consume_token(ATOM);
          jj_consume_token(65);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case STRING:{
            oval = jj_consume_token(STRING);
            break;
            }
          case REAL:{
            oval = jj_consume_token(REAL);
            break;
            }
          case INT:{
            oval = jj_consume_token(INT);
            break;
            }
          case VAR:
          case TK_TRUE:
          case TK_FALSE:
          case TK_NEG:
          case TK_BEGIN:
          case TK_END:
          case ATOM:
          case UNNAMEDVAR:{
            oval = literal();
            break;
            }
          default:
            jj_la1[92] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_67:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              ;
              break;
              }
            default:
              jj_la1[93] = jj_gen;
              break label_67;
            }
          }
g.addParameter(opt.image,oval.toString());
          break;
          }
        case PLAYERS:{
          jj_consume_token(PLAYERS);
          jj_consume_token(65);
          label_68:
          while (true) {
            t = jj_consume_token(ATOM);
            r = jj_consume_token(ATOM);
            label_69:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:{
                jj_consume_token(EOL);
                break;
                }
              case 63:{
                jj_consume_token(63);
                break;
                }
              default:
                jj_la1[94] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case EOL:
              case 63:{
                ;
                break;
                }
              default:
                jj_la1[95] = jj_gen;
                break label_69;
              }
            }
project.addAgRole(t.image, org, g, r.image);
            if (jj_2_16(4)) {
              ;
            } else {
              break label_68;
            }
          }
          break;
          }
        default:
          jj_la1[96] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(67);
      break;
      }
    default:
      jj_la1[97] = jj_gen;
      ;
    }
    label_70:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        break label_70;
      }
      jj_consume_token(EOL);
    }
{if ("" != null) return g;}
    throw new Error("Missing return statement in function");
  }

  final public void scheme(JaCaMoOrgParameters org) throws ParseException {Token t; Token type; Token opt; Object oval;
                             JaCaMoSchemeParameters s = new JaCaMoSchemeParameters(project);
    jj_consume_token(SCHEME);
    t = jj_consume_token(ATOM);
    jj_consume_token(65);
    type = jj_consume_token(ATOM);
s.setName(t.image); s.setType(type.image);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 64:{
      jj_consume_token(64);
      label_71:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EOL:{
          ;
          break;
          }
        default:
          jj_la1[99] = jj_gen;
          break label_71;
        }
        jj_consume_token(EOL);
      }
      label_72:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEBUG:
        case ATOM:{
          ;
          break;
          }
        default:
          jj_la1[100] = jj_gen;
          break label_72;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DEBUG:{
          jj_consume_token(DEBUG);
oval = "inspector_gui(on)";
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 65:{
            jj_consume_token(65);
            oval = literal();
            break;
            }
          default:
            jj_la1[101] = jj_gen;
            ;
          }
          label_73:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              ;
              break;
              }
            default:
              jj_la1[102] = jj_gen;
              break label_73;
            }
          }
s.setDebug(oval.toString());
          break;
          }
        case ATOM:{
          opt = jj_consume_token(ATOM);
          jj_consume_token(65);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case STRING:{
            oval = jj_consume_token(STRING);
            break;
            }
          case REAL:{
            oval = jj_consume_token(REAL);
            break;
            }
          case INT:{
            oval = jj_consume_token(INT);
            break;
            }
          case VAR:
          case TK_TRUE:
          case TK_FALSE:
          case TK_NEG:
          case TK_BEGIN:
          case TK_END:
          case ATOM:
          case UNNAMEDVAR:{
            oval = literal();
            break;
            }
          default:
            jj_la1[103] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_74:
          while (true) {
            jj_consume_token(EOL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              ;
              break;
              }
            default:
              jj_la1[104] = jj_gen;
              break label_74;
            }
          }
s.addParameter(opt.image,oval.toString());
          break;
          }
        default:
          jj_la1[105] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(67);
      break;
      }
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    label_75:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[107] = jj_gen;
        break label_75;
      }
      jj_consume_token(EOL);
    }
org.addScheme(s);
  }

  final public void institution() throws ParseException {Token t;  Token opt; Object oval;
                              JaCaMoInstParameters inst = new JaCaMoInstParameters(project);
    jj_consume_token(INST);
    t = jj_consume_token(ATOM);
inst.setName(t.image);
                             if (project.getInstitution(inst.getName()) != null) {
                                {if (true) throw new ParseException("Institution with id "+inst.getName()+" already exists in the project!");}
                             }
                             inst.addParameter("source",t.image+".sai");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 65:{
      jj_consume_token(65);
      oval = fileName();
inst.addParameter("source",oval.toString());
      break;
      }
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    jj_consume_token(64);
    label_76:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[109] = jj_gen;
        break label_76;
      }
      jj_consume_token(EOL);
    }
    label_77:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DEBUG:
      case WORKSPACES:
      case ATOM:{
        ;
        break;
        }
      default:
        jj_la1[110] = jj_gen;
        break label_77;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WORKSPACES:{
        jj_consume_token(WORKSPACES);
        jj_consume_token(65);
        label_78:
        while (true) {
          t = jj_consume_token(ATOM);
          label_79:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:{
              jj_consume_token(EOL);
              break;
              }
            case 63:{
              jj_consume_token(63);
              break;
              }
            default:
              jj_la1[111] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case EOL:
            case 63:{
              ;
              break;
              }
            default:
              jj_la1[112] = jj_gen;
              break label_79;
            }
          }
inst.addWorkspace(t.image);
          if (jj_2_17(4)) {
            ;
          } else {
            break label_78;
          }
        }
        break;
        }
      case DEBUG:{
        jj_consume_token(DEBUG);
        label_80:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EOL:{
            ;
            break;
            }
          default:
            jj_la1[113] = jj_gen;
            break label_80;
          }
        }
inst.setDebug(true);
        break;
        }
      case ATOM:{
        opt = jj_consume_token(ATOM);
        jj_consume_token(65);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:{
          oval = jj_consume_token(STRING);
          break;
          }
        case REAL:{
          oval = jj_consume_token(REAL);
          break;
          }
        case INT:{
          oval = jj_consume_token(INT);
          break;
          }
        case VAR:
        case TK_TRUE:
        case TK_FALSE:
        case TK_NEG:
        case TK_BEGIN:
        case TK_END:
        case ATOM:
        case UNNAMEDVAR:{
          oval = literal();
          break;
          }
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_81:
        while (true) {
          jj_consume_token(EOL);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case EOL:{
            ;
            break;
            }
          default:
            jj_la1[115] = jj_gen;
            break label_81;
          }
        }
inst.addParameter(opt.image,oval.toString());
        break;
        }
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(67);
    label_82:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[117] = jj_gen;
        break label_82;
      }
      jj_consume_token(EOL);
    }
project.addInstitution(inst);
  }

  final public String host() throws ParseException {Token t; String host; Token n1; Token n2;Token n3;Token n4;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATOM:{
      t = jj_consume_token(ATOM);
host = t.image;
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
host = t.image;
      break;
      }
    case IP:{
      t = jj_consume_token(IP);
host = t.image;
      break;
      }
    default:
      jj_la1[118] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 65:{
      jj_consume_token(65);
      t = jj_consume_token(INT);
host += ":"+t.image;
      break;
      }
    default:
      jj_la1[119] = jj_gen;
      ;
    }
{if ("" != null) return host;}
    throw new Error("Missing return statement in function");
  }

  final public String fileName() throws ParseException {String path = "";
                              Token i;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:
    case DOTDOT:
    case ATOM:
    case 65:
    case 69:
    case 70:{
      label_83:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 69:{
          jj_consume_token(69);
path += "/";
          break;
          }
        case 70:{
          jj_consume_token(70);
path += "-";
          break;
          }
        case 65:{
          jj_consume_token(65);
path += ":";
          break;
          }
        case DOT:{
          i = jj_consume_token(DOT);
path += i.image;
          break;
          }
        case DOTDOT:{
          i = jj_consume_token(DOTDOT);
path += i.image;
          break;
          }
        case ATOM:{
          i = jj_consume_token(ATOM);
path += i.image;
          break;
          }
        default:
          jj_la1[120] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DOT:
        case DOTDOT:
        case ATOM:
        case 65:
        case 69:
        case 70:{
          ;
          break;
          }
        default:
          jj_la1[121] = jj_gen;
          break label_83;
        }
      }
      break;
      }
    case STRING:{
      i = jj_consume_token(STRING);
path = i.image;
      break;
      }
    default:
      jj_la1[122] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return path;}
    throw new Error("Missing return statement in function");
  }

  final public ClassParameters classDef() throws ParseException {Token c; String s; ClassParameters cp = new ClassParameters();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      c = jj_consume_token(VAR);
      break;
      }
    case ATOM:{
      c = jj_consume_token(ATOM);
      break;
      }
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
cp.setClassName(c.image);
    label_84:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[124] = jj_gen;
        break label_84;
      }
      jj_consume_token(DOT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        c = jj_consume_token(VAR);
        break;
        }
      case ATOM:{
        c = jj_consume_token(ATOM);
        break;
        }
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
cp.setClassName(cp.getClassName() + "." + c.image);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 71:{
      jj_consume_token(71);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:
      case INT:
      case REAL:
      case STRING:
      case ATOM:
      case 73:{
        s = parameter();
cp.addParameter(s);
        label_85:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 63:{
            ;
            break;
            }
          default:
            jj_la1[126] = jj_gen;
            break label_85;
          }
          jj_consume_token(63);
          s = parameter();
cp.addParameter(s);
        }
        break;
        }
      default:
        jj_la1[127] = jj_gen;
        ;
      }
      jj_consume_token(72);
      break;
      }
    default:
      jj_la1[128] = jj_gen;
      ;
    }
{if ("" != null) return cp;}
    throw new Error("Missing return statement in function");
  }

  final public String parameter() throws ParseException {Token c; String s; ClassParameters cp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case ATOM:{
      cp = classDef();
{if ("" != null) return cp.toString();}
      break;
      }
    case INT:{
      c = jj_consume_token(INT);
{if ("" != null) return c.image;}
      break;
      }
    case REAL:{
      c = jj_consume_token(REAL);
{if ("" != null) return c.image;}
      break;
      }
    case STRING:{
      c = jj_consume_token(STRING);
{if ("" != null) return c.image;}
      break;
      }
    case 73:{
      s = listParameters();
{if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String listParameters() throws ParseException {String s; List l = new ArrayList();
    jj_consume_token(73);
    s = parameter();
l.add(s);
    label_86:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 63:{
        ;
        break;
        }
      default:
        jj_la1[130] = jj_gen;
        break label_86;
      }
      jj_consume_token(63);
      s = parameter();
l.add(s);
    }
    jj_consume_token(74);
{if ("" != null) return l.toString();}
    throw new Error("Missing return statement in function");
  }

// from Jason

/* Literal */
  final public Literal literal() throws ParseException {Pred F; Token k; boolean type = Literal.LPos;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case ATOM:
    case UNNAMEDVAR:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_NEG:{
        jj_consume_token(TK_NEG);
type = Literal.LNeg;
        break;
        }
      default:
        jj_la1[131] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TK_BEGIN:
      case TK_END:
      case ATOM:{
        F = pred();
{if ("" != null) return new LiteralImpl(type,F);}
        break;
        }
      case VAR:
      case UNNAMEDVAR:{
        F = var();
VarTerm vt = (VarTerm)F;
                                vt.setNegated(type);
                                {if ("" != null) return vt;}
        break;
        }
      default:
        jj_la1[132] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case TK_TRUE:{
      k = jj_consume_token(TK_TRUE);
{if ("" != null) return Literal.LTrue;}
      break;
      }
    case TK_FALSE:{
      k = jj_consume_token(TK_FALSE);
{if ("" != null) return Literal.LFalse;}
      break;
      }
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Annotated Formulae */
  final public Pred pred() throws ParseException {Token K; Pred p; List l; ListTerm lt; Term b;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ATOM:{
      K = jj_consume_token(ATOM);
      break;
      }
    case TK_BEGIN:{
      K = jj_consume_token(TK_BEGIN);
      break;
      }
    case TK_END:{
      K = jj_consume_token(TK_END);
      break;
      }
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
p = new Pred(K.image);
                         //p.setSrcInfo(new SourceInfo(asSource, K.beginLine));

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 71:{
      jj_consume_token(71);
      l = terms();
      jj_consume_token(72);
p.setTerms(l);
      break;
      }
    default:
      jj_la1[135] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 73:{
      lt = list();
p.setAnnots(lt);
      break;
      }
    default:
      jj_la1[136] = jj_gen;
      ;
    }
{if ("" != null) return p;}
    throw new Error("Missing return statement in function");
  }

/* List of terms */
  final public List terms() throws ParseException {ArrayList listTerms = new ArrayList(); Term v; PlanBody o;
    v = term();
listTerms.add(v);
    label_87:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 63:{
        ;
        break;
        }
      default:
        jj_la1[137] = jj_gen;
        break label_87;
      }
      jj_consume_token(63);
      v = term();
listTerms.add(v);
    }
listTerms.trimToSize();
                         {if ("" != null) return listTerms;}
    throw new Error("Missing return statement in function");
  }

  final public Term term() throws ParseException {Object o=null; Token K; String sig = "+";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 73:{
      o = list();
      break;
      }
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case ATOM:
    case UNNAMEDVAR:{
      o = literal();
      break;
      }
    case STRING:{
      o = string();
      break;
      }
    default:
      jj_la1[140] = jj_gen;
      if (jj_2_18(4)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 70:{
          jj_consume_token(70);
sig = "-";
          break;
          }
        default:
          jj_la1[138] = jj_gen;
          ;
        }
        K = jj_consume_token(INT);
{if ("" != null) return ASSyntax.parseNumber(sig+K.image);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case REAL:
        case 70:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 70:{
            jj_consume_token(70);
sig = "-";
            break;
            }
          default:
            jj_la1[139] = jj_gen;
            ;
          }
          K = jj_consume_token(REAL);
{if ("" != null) return ASSyntax.parseNumber(sig+K.image);}
          break;
          }
        default:
          jj_la1[141] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return changeToAtom(o);}
    throw new Error("Missing return statement in function");
  }

  final public ListTermImpl list() throws ParseException {ListTermImpl lt = new ListTermImpl(); ListTerm last; Token K; Term f;
    jj_consume_token(73);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case TK_BEGIN:
    case TK_END:
    case INT:
    case REAL:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 70:
    case 73:{
      f = term();
last = lt.append(f); lt.setSrcInfo(f.getSrcInfo());
      label_88:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 63:{
          ;
          break;
          }
        default:
          jj_la1[142] = jj_gen;
          break label_88;
        }
        jj_consume_token(63);
        f = term();
last = last.append(f);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 75:{
        jj_consume_token(75);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
          K = jj_consume_token(VAR);
last.setNext(new VarTerm(K.image));
          break;
          }
        case UNNAMEDVAR:{
          K = jj_consume_token(UNNAMEDVAR);
last.setNext(UnnamedVar.create(K.image));
          break;
          }
        case 73:{
          f = list();
last = last.concat((ListTerm)f);
          break;
          }
        default:
          jj_la1[143] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[144] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[145] = jj_gen;
      ;
    }
    jj_consume_token(74);
{if ("" != null) return lt;}
    throw new Error("Missing return statement in function");
  }

  final public VarTerm var() throws ParseException {Token K; VarTerm v; ListTerm lt;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      K = jj_consume_token(VAR);
v = new VarTerm(K.image);
                      //v.setSrcInfo(new SourceInfo(asSource, K.beginLine));

      break;
      }
    case UNNAMEDVAR:{
      K = jj_consume_token(UNNAMEDVAR);
v = UnnamedVar.create(K.image);
      break;
      }
    default:
      jj_la1[146] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 73:{
      lt = list();
v.setAnnots(lt);
      break;
      }
    default:
      jj_la1[147] = jj_gen;
      ;
    }
{if ("" != null) return v;}
    throw new Error("Missing return statement in function");
  }

  final public StringTerm string() throws ParseException {Token k; StringTermImpl s;
    k = jj_consume_token(STRING);
s = new StringTermImpl(k.image.substring(1,k.image.length()-1).replaceAll("\\\\n", "\n"));
                      //s.setSrcInfo(new SourceInfo(asSource,k.beginLine));
                      {if ("" != null) return s;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_3R_148()
 {
    if (jj_3R_146()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_153()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(73)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_3R_107()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_scan_token(70)) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) jj_scanpos = xsp;
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_scan_token(70)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_scan_token(63)) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_3R_146()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_147()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(71)) return true;
    if (jj_3R_144()) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(ATOM)) return true;
    if (jj_scan_token(68)) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_106()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_scan_token(TK_FALSE)) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(TK_TRUE)) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_93()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_103()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_scan_token(TK_NEG)) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_98()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_115()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  private boolean jj_3R_99()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_97()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_scan_token(73)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(ATOM)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(68)) return true;
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    if (jj_3R_104()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(REAL)) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_129()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(63)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_99()) return true;
    Token xsp;
    if (jj_3R_101()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_99()) return true;
    Token xsp;
    if (jj_3R_100()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_95()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_94()) return true;
    Token xsp;
    if (jj_3R_98()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_89()) return true;
    Token xsp;
    if (jj_3R_93()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    if (jj_3R_96()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_89()) return true;
    Token xsp;
    if (jj_3R_92()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_89()) return true;
    Token xsp;
    if (jj_3R_91()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_89()) return true;
    Token xsp;
    if (jj_3R_90()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    if (jj_3R_97()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_109()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(71)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    return false;
  }

  private boolean jj_3R_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(ATOM)) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(DOTDOT)) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(65)) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(70)) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(69)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    if (jj_3R_109()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_111()
 {
    Token xsp;
    if (jj_3R_118()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_89()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    return false;
  }

  private boolean jj_3R_108()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_94()) return true;
    Token xsp;
    if (jj_3R_95()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_107()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(ATOM)) return true;
    if (jj_scan_token(ATOM)) return true;
    Token xsp;
    if (jj_3R_108()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(UNNAMEDVAR)) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_scan_token(75)) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(63)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public JaCaMoProjectParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[148];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x100000,0x0,0x0,0x80,0x10000000,0x0,0x0,0x3e04000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x3e04000,0x0,0x0,0x0,0x4073f00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x4073f00,0x0,0x0,0x0,0xa4008000,0x0,0x0,0x0,0x0,0x0,0x0,0xa4008000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x20,0x0,0x80000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x20,0x0,0x4000000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x20,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x20,0x0,0x20,0x0,0x20,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x20,0x0,0x20,0x20,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10000,0x80000000,0x0,0x10000,0x10000,0x0,0x0,0x40,0x1,0x0,0x80010000,0x80010000,0x80010000,0x80010000,0x80010000,0x80010000,0x80010000,0x80010000,0x80010000,0x80010000,0x0,0x0,0x80010000,0x80010000,0x0,0x10000,0x0,0x10000,0x1000000,0x80010000,0x80010000,0x80010000,0x80010000,0x80010000,0x80010000,0x10000,0x10000,0x80010000,0x80010000,0x80010000,0x80010000,0x0,0x80010000,0x80010000,0x80010000,0x80010000,0x0,0x80010000,0x80010000,0x80010000,0x80010000,0x31ccb00,0x10000,0x1000000,0x0,0x10000,0x10000,0x0,0x1200000,0x80010000,0x80010000,0x1200000,0x10000,0x10000,0x0,0x10000,0x10000,0x1200000,0x1200000,0x80010000,0x80010000,0x0,0x0,0x10000,0x0,0x10000,0x100002a,0x1200000,0x80010000,0x80010000,0x10000,0x31ccb00,0x10000,0x100002a,0x10000,0x10000,0x1000016,0x80010000,0x80010000,0x1000000,0x0,0x10000,0x31ccb00,0x10000,0x80010000,0x80010000,0x1000016,0x0,0x10000,0x10000,0x1000000,0x0,0x10000,0x31ccb00,0x10000,0x1000000,0x0,0x10000,0x0,0x10000,0x1000080,0x80010000,0x80010000,0x10000,0x31ccb00,0x10000,0x1000080,0x10000,0x1120000,0x0,0x1c00000,0x1c00000,0x1d00000,0x1000000,0x400000,0x1000000,0x80000000,0x11c0000,0x0,0x11c0000,0x80000000,0x800,0x300c000,0x300cb00,0x100c000,0x0,0x0,0x80000000,0x0,0x0,0x310cb00,0x80000,0x80000000,0x2000000,0x0,0x31ccb00,0x2000000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x62,0x62,0x62,0x0,0x0,0x0,0x0,0x200,0x80,0x200,0x0,0x0,0x0,0x0,0x0,0x80,0x200,0x0,0x40,0x40,0x200,0x40,0x0,0x200,0x800,0x240,0x0,0x200,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[18];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public JaCaMoProjectParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JaCaMoProjectParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JaCaMoProjectParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 148; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 148; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public JaCaMoProjectParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JaCaMoProjectParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 148; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new JaCaMoProjectParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 148; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public JaCaMoProjectParser(JaCaMoProjectParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 148; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JaCaMoProjectParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 148; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[76];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 148; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 76; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
              case 10: jj_3_11(); break;
              case 11: jj_3_12(); break;
              case 12: jj_3_13(); break;
              case 13: jj_3_14(); break;
              case 14: jj_3_15(); break;
              case 15: jj_3_16(); break;
              case 16: jj_3_17(); break;
              case 17: jj_3_18(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
